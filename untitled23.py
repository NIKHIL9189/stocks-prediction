# -*- coding: utf-8 -*-
"""Untitled23.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CHvTGa8bHJsSSvonc116PXeOvVuVd3hy
"""

# Import necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.linear_model import LinearRegression

# Load data from CSV files into DataFrames
tata_motors = pd.read_csv('/content/TATAMOTORS.csv', sep=';')
tata_steel = pd.read_csv('/content/TATASTEEL.csv', sep=';')
tcs = pd.read_csv('/content/TCS.csv', sep=';')

# Convert the 'Date' column to a datetime format for all DataFrames
for df in [tata_motors, tata_steel, tcs]:
    df["Date"] = pd.to_datetime(df["Date"])

# Drop unnecessary columns from all DataFrames
cols_to_drop = ['Trades', 'Deliverable Volume', '%Deliverble']
for df in [tata_motors, tata_steel, tcs]:
    df.drop(cols_to_drop, axis=1, inplace=True)

# Extract and add 'Month', 'Year', and 'Day' columns to the Tata Motors and Tata Steel DataFrames
for df in [tata_motors, tata_steel]:
    df['Month'] = df["Date"].dt.month
    df['Year'] = df["Date"].dt.year
    df['Day'] = df["Date"].dt.day

# Extract and add 'Day' and 'Year' columns to the TCS DataFrame
tcs['Day'] = tcs['Date'].dt.day
tcs['Year'] = tcs['Date'].dt.year

# Create a plot to visualize the opening prices of Tata Motors, Tata Steel, and TCS over time
plt.figure(figsize=(20, 7))
plt.plot(tata_motors['Date'], tata_motors['Open'], color='blue', label='Tata Motors')
plt.plot(tata_steel['Date'], tata_steel['Open'], color='magenta', label='Tata Steel')
plt.plot(tcs['Date'], tcs['Open'], color='orange', label='TCS')
plt.title("Relation between Tata Motors, Tata Steel, and TCS Price")
plt.xlabel("Year")
plt.ylabel("Price")
plt.legend(title="Stocks")
plt.grid(True)

# Create a plot to visualize the trading volume of Tata Motors, Tata Steel, and TCS over time
plt.figure(figsize=(20, 7))
plt.plot(tata_motors['Date'], tata_motors['Volume'], color='blue', label='Tata Motors')
plt.plot(tata_steel['Date'], tata_steel['Volume'], color='magenta', label='Tata Steel')
plt.plot(tcs['Date'], tcs['Volume'], color='orange', label='TCS')
plt.title("Relation between Tata Motors, Tata Steel, and TCS Volume")
plt.xlabel("Year")
plt.ylabel("Volume")
plt.legend(title="Stocks")
plt.grid(True)

# Linear Regression for Price Prediction
def perform_linear_regression(df, stock_name):
    x = np.array(range(len(df))).reshape(-1, 1)
    y = df['Open']
    model = LinearRegression()
    model.fit(x, y)
    predicted_prices = model.predict(x)

    # Extend predictions to the year 2040
    future_dates = pd.date_range(start=df['Date'].min(), end='2040-01-01')
    future_dates_x = np.array(range(len(df), len(df) + len(future_dates))).reshape(-1, 1)
    future_predictions = model.predict(future_dates_x)

    # Plot the regression line
    plt.figure(figsize=(20, 7))
    plt.plot(df['Date'], df['Open'], color='blue', label=stock_name)
    plt.plot(df['Date'], predicted_prices, color='red', linestyle='dashed', label=f'Predicted {stock_name} Price')
    plt.plot(future_dates, future_predictions, color='green', linestyle='dashed', label=f'Predicted {stock_name} Price (2040)')
    plt.title(f"{stock_name} Price Prediction")
    plt.xlabel("Year")
    plt.ylabel("Price")
    plt.legend(title="Stocks")
    plt.grid(True)

    return future_predictions

# Perform linear regression for each stock and get future predictions
tata_motors_predictions = perform_linear_regression(tata_motors, 'Tata Motors')
tata_steel_predictions = perform_linear_regression(tata_steel, 'Tata Steel')
tcs_predictions = perform_linear_regression(tcs, 'TCS')

# Calculate and display investment results
def calculate_investment_results(df, stock_name, end_price):
    sum_invested = 0
    shares_owned = 0

    # Calculate total amount invested and number of shares owned
    for i in range(len(df)):
        if df.loc[i, 'Day'] == 30:
            sum_invested += df.loc[i, 'Open']
            shares_owned += 1

    # Display basic results for the investment
    print(f"Total Invested in {stock_name} = Rs {round(sum_invested, 2)}")
    print(f"Shares Owned of {stock_name} = {shares_owned}")
    print(f"Average Investment of 1 share = Rs {round((sum_invested / shares_owned), 2)}")

    # Calculate investment results
    investment_result = round((end_price * shares_owned) - sum_invested, 2)
    roi = round((investment_result / sum_invested) * 100, 2)

    # Display investment results
    print("Investment Result:")
    if investment_result < 0:
        print(f"Net Unrealized Loss = Rs {investment_result}")
    else:
        print(f"Net Unrealized Profit = Rs {investment_result}")
    print(f"{stock_name} ROI from {df['Date'].min().date()} to 2021-04-30 =", roi, "%")

    return (sum_invested, investment_result)  # Return investment results

# Set the last open price of each stock on 2021-04-30
tata_motors_end = 298.2
tata_steel_end = 1024
tcs_end = 3099

# Calculate and display investment results for each stock
tata_motors_investment_result = calculate_investment_results(tata_motors, 'Tata Motors', tata_motors_end)
tata_steel_investment_result = calculate_investment_results(tata_steel, 'Tata Steel', tata_steel_end)
tcs_investment_result = calculate_investment_results(tcs, 'TCS', tcs_end)

#bar graph
# Create a bar chart to visualize profit/loss for the three stocks
plt.figure(figsize=(10, 7))
stocks = ['Tata Motors', 'Tata Steel', 'TCS']
amounts = [tata_motors_investment_result[1], tata_steel_investment_result[1], tcs_investment_result[1]]
colors = ['blue', 'magenta', 'orange']
plt.bar(stocks, amounts, color=colors)
plt.title("Profit/Loss")
plt.xlabel("Stocks")
plt.ylabel("Amount")
plt.grid(True)

# Calculate portfolio allocation
portfolio_allocation = {
    'Tata Motors': tata_motors_investment_result[0],
    'Tata Steel': tata_steel_investment_result[0],
    'TCS': tcs_investment_result[0]
}

# Create a pie chart to visualize portfolio allocation
plt.figure(figsize=(7, 7))
labels = portfolio_allocation.keys()
amounts = portfolio_allocation.values()
colors = ['blue', 'magenta', 'orange']

plt.pie(amounts, labels=labels, autopct='%1.1f%%', colors=colors)
plt.title("Portfolio Allocation")

# Show the pie chart
plt.show()